package numeroyletras;

import java.util.Arrays;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

 
	class Main
	{
	    // Función recursivo de arriba hacia abajo para encontrar todas las combinaciones posibles de palabras formadas
	    // desde el teclado del movil
	    public static void findCombinations(List<List<Character>> keypad, int[] keys,
	                            Set<String> combinations, String result, int index)
	    {
	        // si hemos procesado todos los dígitos de la clave, imprimimos el resultado
	        if (index == -1) {
	            combinations.add(result);
	            return;
	        }
	 
	        // almacena el digito actual
	        int digit = keys[index];
	 
	        // uno por uno, reemplaza el dígito con cada carácter en el correspondiente
	        // enumerar y repetir para el siguiente dígito
	        for (char c : keypad.get(digit)) {
	            findCombinations(keypad, keys, combinations, c + result, index - 1);
	        }
	    }
	 
	    public static Set<String> combinations(List<List<Character>> keypad, int[] keys) {
	 
	        // HashSet para almacenar todas las combinaciones
	        Set<String> combinations = new HashSet<>();
	 
	        // entrada inválida - devuelve un conjunto vacío
	        if (keypad == null || keypad.size() == 0 || keys == null || keys.length == 0) {
	            return combinations;
	        }
	 
	        // busca y devuelve todas las combinaciones
	        findCombinations(keypad, keys, combinations, "", keys.length - 1);
	        return combinations;
	    }
	 
	    public static void main(String[] args)
	    {
	        // teclado móvil
	        List<List<Character>> keypad = Arrays.asList(
	                // 0 y 1 dígito no tiene caracteres asociados
	                Arrays.asList(),
	                Arrays.asList(),
	                Arrays.asList('A', 'B', 'C'),
	                Arrays.asList('D', 'E', 'F'),
	                Arrays.asList('G', 'H', 'I'),
	                Arrays.asList('J', 'K', 'L'),
	                Arrays.asList('M', 'N', 'O'),
	                Arrays.asList('P', 'Q', 'R', 'S'),
	                Arrays.asList('T', 'U', 'V'),
	                Arrays.asList('W', 'X', 'Y', 'Z')
	        );
	 
	        // número de entrada en forma de array (el número no puede comenzar desde 0 o 1)
	        int[] keys = {2, 3, 4};
	 
	        // encontrar todas las combinaciones
	        System.out.println(combinations(keypad, keys));
	    }
	}
	